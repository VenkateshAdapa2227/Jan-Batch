EKS Cluster Creation Manual Process: (https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.html)
1. install kubectl(interface to communicate with cluster(EKS service)) on ec2-server (https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html)
	curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
	curl -o kubectl.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl.sha256
	openssl sha1 -sha256 kubectl
	chmod +x ./kubectl
	mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
	kubectl version --short --client
2. Install IAM authenticator (https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)
	curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
	curl -o aws-iam-authenticator.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator.sha256
	openssl sha1 -sha256 aws-iam-authenticator
	chmod +x ./aws-iam-authenticator
	cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
	aws-iam-authenticator help
3. Configure AWS 
	aws configure (provide your access key id and secret access key and ur region)
4.Create VPC (Using Cloud formation template)
	- https://amazon-eks.s3.us-west-2.amazonaws.com/cloudformation/2020-10-29/amazon-eks-vpc-private-subnets.yaml
5.Create an IAM Role for your Kubernetes CLuster to communicate with other services
	-select AWS Service
	- check for EKS in your service search bar 
	- check EKS CLuster Policy then create by providing some name to your role
6.Create EKS CLuster 
	aws eks update-kubeconfig --region us-east-1 --name eks-master
7. Check wheather we can access the cluster from ec2-machine
	- aws eks update-kubeconfig --region us-east-1 --name eks-master
	- kubectl get all (you should see your cluster service)
8. COnfigure WOrker Node
	- create a file with 'node-role-trust-policy.json' [cmd - vi node-role-trust-policy.json] and enter into insert mode and copy the below content
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}

- save and exit the file (:wq!)
aws iam create-role \
  --role-name myAmazonEKSNodeRole \
  --assume-role-policy-document file://"node-role-trust-policy.json"

aws iam attach-role-policy \
  --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy \
  --role-name myAmazonEKSNodeRole
aws iam attach-role-policy \
  --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
  --role-name myAmazonEKSNodeRole
aws iam attach-role-policy \
  --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy \
  --role-name myAmazonEKSNodeRole

9. Enter into EKS cluster under configuration under compute create worker node group..
10. once it is completed u can see ur ec2 instances sppined up on ur dashboard.
11. Deploy application:
	- install git
	- install maven 
	- install docker
	- clone your project
	- mvn clean
	- mvn clean install
	- run docker build cmd to generate image
	- copy deployment and service yml files onto your ec2 user directory (cp <ur file name> /home/ec2-user)
12. Create ECR Repository and click on 'view Push Commands' and execute 1,3,4 cmds.
13. edit deployment.yaml file and replace image name with your ECR URI
14. kubectl apply -f deployment.yaml
15. kubectl get all (once your deployments and pods are available goto next step)
16. kubectl apply -f service.yaml (note down the port which u got)
17. access ur appliaction on browser using Workernode IPv4 adress and service port. (Make sure u will have all traffic on ur security group of ur worker nodes)







------------------------------
https://github.com/wardviaene/terraform-course/tree/master/eks-demo

---------------------
AWS EKS With Terraform:
1. sudo yum install git -y
2. install terraform: 
	wget https://releases.hashicorp.com/terraform/0.12.31/terraform_0.12.31_linux_amd64.zip
	unzip terraform_0.12.31_linux_amd64.zip
	mkdir $HOME/bin && cp ./terraform $HOME/bin/terraform && export PATH=$HOME/bin:$PATH
	sudo cp ./terraform /usr/bin/terraform && export PATH=/usr/bin:$PATH
3. install kubectl, iam-authenticator, aws configure
4. Clone project: git clone https://github.com/wardviaene/terraform-course.git and cd terraform-course/eks-demo/
5. terraform init
6. terraform plan (we can skip this terraform plan as we can see in terraform apply)
7. terraform apply (if you want to update already created infra - terraform refresh then terraform apply && If you want to delete ur infra use - terraform destroy)
8. Open duplicate session parallely (in order to deploy sample application and test our cluster)
	- install maven
	- install docker
	- clone employee service project
	- Build and generate image and push to ECR
	- Change your deployment.yaml file wrt ECR image URI
9. terraform output kubeconfig > kubeconfig
export KUBECONFIG=kubeconfig
terraform output config-map-aws-auth > aws-auth.yaml

aws eks --region us-east-1 update-kubeconfig --name terraform-eks-demo
kubectl get all
kubectl apply -f aws-auth.yaml
kubectl get nodes --watch

10. Move to the duplicate session where u are having deployment and service yaml files location
	- aws eks --region us-east-1 update-kubeconfig --name terraform-eks-demo
	- kubectl apply -f deployment.yaml
	- kubectl get all
	- kubectl apply -f service.yaml
	kubectl get all


======================Jenkins ==========================
==================== Jenkins ==========================
sudo yum -y update
sudo yum install java-1.8.0
sudo yum install git -y
sudo yum install maven -y
sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
sudo yum install jenkins -y
sudo systemctl start jenkins
systemctl status jenkins
sudo yum install -y docker
sudo systemctl start docker
sudo setfacl -m user:ec2-user:rw /var/run/docker.sock
sudo usermod -aG docker jenkins
sudo vi /etc/sudoers  ========> jenkins ALL=(ALL) NOPASSWD: ALL
sudo service jenkins restart
sudo systemctl enable jenkins

http://52.23.233.195:8080/github-webhook/


------------------DOcker-COmpose--------------
sudo yum install java-1.8.0 -y
sudo yum install maven -y
sudo yum install git -y
sudo yum install -y docker
sudo systemctl start docker
sudo setfacl -m user:ec2-user:rw /var/run/docker.sock
sudo curl -L https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname -s`-`uname -m` -o /usr/bin/docker-compose
sudo chmod +x /usr/bin/docker-compose

clone docker-spring-boot project
enter into the directory after cloning where you can find pom.xml
mvn clean install -DskipTests
docker-compose up


